name: Draft API CI/CD Pipeline

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
  #to enable manual triggering
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/Checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Initialize database
      run: |
        python -c "from app.application import app, db; app.app_context().push(); db.create_all()"

    - name: Run tests
      run: |
        python -m pytest tests/ -v

    - name: Build API Docker image
      run: |
        docker build -f Dockerfile.api -t flask-api:${{ github.sha }} .
    - name: Build test Docker image
      run: |
        docker build -f Dockerfile.tests -t flask-tests:${{ github.sha }} .
    - name: Run Docker tests
      run: |
        docker run --rm flask-tests:${{ github.sha }}
    - name: Test API container startup
      run: |
        #start API container in background
        docker run -d --name test-api -p 5001:5000 flask-api:${{ github.sha }}
        #wait for startup
        sleep 10
        #test end points
        curl -f http://localhost:5001/ || (docker logs test-api && exit 1)
        curl -f http://localhost:5001/api/v1/ || (docker logs test-api && exit 1)
        curl -f http://localhost:5001/api/v1/drafts || (docker logs test-api && exit 1)
        #cleanup
        docker stop test-api
        docker rm test-api

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Build production images
      run: |
        docker build -f Dockerfile.api -t flask-api:latest .
        docker build -f Dockerfile.api -t flask-api:${{ github.sha }} .
    - name: Log deployment info
      run: |
        echo "deployment ready for commit: ${{ github.sha }}"
        echo "API Image: flask-api:${{ github.sha }}"
        echo "Deploy at: $(date)"
        echo "Deployed by: ${{ github.actor }}"